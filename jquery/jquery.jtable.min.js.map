{"version":3,"sources":["jquery.jtable.js"],"names":["$","unloadingPage","window","on","widget","options","actions","fields","animationsEnabled","defaultDateFormat","defaultChangeMonth","defaultChangeYear","defaultYearRange","defaultMaxDate","dialogShowEffect","dialogHideEffect","showCloseButton","loadingAnimationDelay","saveUserPreferences","jqueryuiTheme","unAuthorizedRequestRedirectUrl","ajaxSettings","type","dataType","toolbar","hoverAnimation","hoverAnimationDuration","hoverAnimationEasing","undefined","items","closeRequested","event","data","formCreated","formSubmitting","formClosed","loadingRecords","recordsLoaded","rowInserted","rowsRemoved","messages","serverCommunicationError","loadingMessage","noDataAvailable","areYouSure","save","saving","cancel","error","close","cannotLoadOptionsFor","_$mainContainer","_$titleDiv","_$toolbarDiv","_$table","_$tableBody","_$tableRows","_$busyDiv","_$busyMessageDiv","_$errorDialogDiv","_columnList","_fieldList","_keyField","_firstDataColumnOffset","_lastPostData","_cache","_extraFieldTypes","_create","this","_normalizeFieldsOptions","_initializeFields","_createFieldAndColumnList","_createMainContainer","_createTableTitle","_createToolBar","_createTable","_createBusyPanel","_createErrorDialogDiv","_addNoDataRow","_cookieKeyPrefix","_generateCookieKeyPrefix","self","each","fieldName","props","_normalizeFieldOptions","listClass","inputClass","placeholder","dependsOn","dependsOnArray","split","i","length","push","trim","name","key","list","addClass","appendTo","element","_jqueryuiThemeAddClass","title","$titleDiv","append","$textSpan","html","attr","click","e","preventDefault","stopPropagation","_onCloseRequested","tableId","_createTableHead","_createTableBody","$thead","_addRowToTableHead","$tr","_addColumnsToHeaderRow","_createHeaderCellForField","field","width","$headerTextSpan","$headerContainerDiv","$th","css","_createEmptyCommandHeader","prependTo","_hideBusy","dialog","autoOpen","show","hide","modal","buttons","text","load","postData","completeCallback","_reloadTable","reload","getRowByKey","_getKeyValueOfRecord","destroy","empty","Widget","prototype","call","_setOption","value","completeReload","Result","_removeAllRows","_addRecordsToTable","Records","_onRecordsLoaded","_showError","Message","_showBusy","_onLoadingRecords","isFunction","listAction","funcResult","_createJtParamsForLoading","_isDeferredObject","done","fail","always","loadUrl","_createRecordLoadUrl","_ajax","url","success","_createRowFromRecord","record","_addCellsToRowUsingRecord","$row","_createCellForRecordField","_getDisplayTextForRecordField","records","index","_addRow","_refreshRowStyles","_addRowToTable","$tableRow","isNewRow","_normalizeNumber","extend","_removeNoDataRow","prepend","unshift","after","splice","_onRowInserted","_showNewRowAnimation","className","removeClass","_removeRowsFromTable","$rows","reason","remove","_findRowIndex","_onRowsRemoved","_findIndexInArray","$row1","$row2","find","totalColumnCount","fieldValue","display","extraFieldType","_findItemByProperty","creator","_getDisplayTextForDateRecordField","_getCheckBoxTextForFieldByValue","_getOptionsForField","source","dependedValues","_createDependedValuesUsingRecord","_findOptionByValue","DisplayText","displayFormat","date","_parseDate","_formatDate","format","pad","n","z","Array","join","replace","getSeconds","getDate","getMinutes","getMonth","getFullYear","substring","getHours","funcParams","optionsSource","_cacheCleared","clearCache","cacheKey","_buildOptionsFromArray","_downloadOptions","_sortFieldOptions","optionsSorting","jQuery","isArray","_buildOptionsArrayFromObject","async","Options","errMessage","_formatString","sorting","dataSelector","compareFunc","indexOf","option","Value","option1","option2","localeCompare","sort","a","b","propName","propValue","optionsArray","isPlainObject","dateString","Date","parseInt","substr","dtcomps","UTC","_logWarn","_addToolBarItem","item","icon","$toolBarItem","cssClass","tooltip","$icon","hover","message","_setBusyTimer","delay","height","makeVisible","setTimeout","clearTimeout","_isBusy","is","$elm","hoverClassName","_performAjaxCall","_unAuthorizedRequestHandler","location","href","opts","statusCode","401","UnAuthorizedRequest","jqXHR","textStatus","errorThrown","abort","arguments","complete","ajax","_setCookie","expireDate","setDate","document","cookie","encodeURIComponent","toUTCString","_getCookie","equalities","splitted","decodeURIComponent","strToHash","hash","charCodeAt","simpleHash","_trigger","serverResponse","row","rows","hik","jtable","_getPropertyOfObject","obj","preDot","postDot","_setPropertyOfObject","_insertToArrayIfDoesNotExists","array","inArray","number","min","max","defaultValue","isNaN","str","placeHolder","then","_logDebug","console","log","_logInfo","_logError","elt","len","from","Number","Math","ceil","floor","base","multiSorting","defaultSorting","_lastSorting","apply","_buildDefaultSortingArray","$headerCell","_makeColumnSortable","initialSortingDirection","_addSortingInfoToUrl","orderIndex","orderValue","fieldProps","colOffset","toUpperCase","sortOrder","$columnHeader","ctrlKey","_sortTableByColumn","toLowerCase","sortIndex","sortField","siblings","hasClass","idx","jtParams","jtSorting"],"mappings":"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","sourcesContent":["﻿/* \n\njTable 2.5.0\nhttp://www.jtable.org\n\n---------------------------------------------------------------------------\n\nCopyright (C) 2011-2014 by Halil İbrahim Kalkan (http://www.halilibrahimkalkan.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n/************************************************************************\n* CORE jTable module                                                    *\n*************************************************************************/\n(function ($) {\n\n    var unloadingPage;\n\n    $(window).on('beforeunload', function () {\n        unloadingPage = true;\n    });\n    $(window).on('unload', function () {\n        unloadingPage = false;\n    });\n\n    $.widget(\"hik.jtable\", {\n\n        /************************************************************************\n        * DEFAULT OPTIONS / EVENTS                                              *\n        *************************************************************************/\n        options: {\n\n            //Options\n            actions: {},\n            fields: {},\n            animationsEnabled: true,\n            defaultDateFormat: 'yy-mm-dd',\n            defaultChangeMonth: false,\n            defaultChangeYear: false,\n            defaultYearRange: 'c-10:c+10',\n            defaultMaxDate: null,\n            dialogShowEffect: 'fade',\n            dialogHideEffect: 'fade',\n            showCloseButton: false,\n            loadingAnimationDelay: 500,\n            saveUserPreferences: true,\n            jqueryuiTheme: false,\n            unAuthorizedRequestRedirectUrl: null,\n\n            ajaxSettings: {\n                type: 'POST',\n                dataType: 'json'\n            },\n\n            toolbar: {\n                hoverAnimation: true,\n                hoverAnimationDuration: 60,\n                hoverAnimationEasing: undefined,\n                items: []\n            },\n\n            //Events\n            closeRequested: function (event, data) { },\n            formCreated: function (event, data) { },\n            formSubmitting: function (event, data) { },\n            formClosed: function (event, data) { },\n            loadingRecords: function (event, data) { },\n            recordsLoaded: function (event, data) { },\n            rowInserted: function (event, data) { },\n            rowsRemoved: function (event, data) { },\n\n            //Localization\n            messages: {\n                serverCommunicationError: 'An error occured while communicating to the server.',\n                loadingMessage: 'Loading records...',\n                noDataAvailable: 'No data available!',\n                areYouSure: 'Are you sure?',\n                save: 'Save',\n                saving: 'Saving',\n                cancel: 'Cancel',\n                error: 'Error',\n                close: 'Close',\n                cannotLoadOptionsFor: 'Can not load options for field {0}'\n            }\n        },\n\n        /************************************************************************\n        * PRIVATE FIELDS                                                        *\n        *************************************************************************/\n\n        _$mainContainer: null, //Reference to the main container of all elements that are created by this plug-in (jQuery object)\n\n        _$titleDiv: null, //Reference to the title div (jQuery object)\n        _$toolbarDiv: null, //Reference to the toolbar div (jQuery object)\n\n        _$table: null, //Reference to the main <table> (jQuery object)\n        _$tableBody: null, //Reference to <body> in the table (jQuery object)\n        _$tableRows: null, //Array of all <tr> in the table (except \"no data\" row) (jQuery object array)\n\n        _$busyDiv: null, //Reference to the div that is used to block UI while busy (jQuery object)\n        _$busyMessageDiv: null, //Reference to the div that is used to show some message when UI is blocked (jQuery object)\n        _$errorDialogDiv: null, //Reference to the error dialog div (jQuery object)\n\n        _columnList: null, //Name of all data columns in the table (select column and command columns are not included) (string array)\n        _fieldList: null, //Name of all fields of a record (defined in fields option) (string array)\n        _keyField: null, //Name of the key field of a record (that is defined as 'key: true' in the fields option) (string)\n\n        _firstDataColumnOffset: 0, //Start index of first record field in table columns (some columns can be placed before first data column, such as select checkbox column) (integer)\n        _lastPostData: null, //Last posted data on load method (object)\n\n        _cache: null, //General purpose cache dictionary (object)\n\n        _extraFieldTypes:[],\n\n        /************************************************************************\n        * CONSTRUCTOR AND INITIALIZATION METHODS                                *\n        *************************************************************************/\n\n        /* Contructor.\n        *************************************************************************/\n        _create: function () {\n\n            //Initialization\n            this._normalizeFieldsOptions();\n            this._initializeFields();\n            this._createFieldAndColumnList();\n\n            //Creating DOM elements\n            this._createMainContainer();\n            this._createTableTitle();\n            this._createToolBar();\n            this._createTable();\n            this._createBusyPanel();\n            this._createErrorDialogDiv();\n            this._addNoDataRow();\n\n            this._cookieKeyPrefix = this._generateCookieKeyPrefix();\n        },\n\n        /* Normalizes some options for all fields (sets default values).\n        *************************************************************************/\n        _normalizeFieldsOptions: function () {\n            var self = this;\n            $.each(self.options.fields, function (fieldName, props) {\n                self._normalizeFieldOptions(fieldName, props);\n            });\n        },\n\n        /* Normalizes some options for a field (sets default values).\n        *************************************************************************/\n        _normalizeFieldOptions: function (fieldName, props) {\n            if (props.listClass == undefined) {\n                props.listClass = '';\n            }\n            if (props.inputClass == undefined) {\n                props.inputClass = '';\n            }\n            if (props.placeholder == undefined) {\n                props.placeholder = '';\n            }\n\n            //Convert dependsOn to array if it's a comma seperated lists\n            if (props.dependsOn && $.type(props.dependsOn) === 'string') {\n                var dependsOnArray = props.dependsOn.split(',');\n                props.dependsOn = [];\n                for (var i = 0; i < dependsOnArray.length; i++) {\n                    props.dependsOn.push($.trim(dependsOnArray[i]));\n                }\n            }\n        },\n\n        /* Intializes some private variables.\n        *************************************************************************/\n        _initializeFields: function () {\n            this._lastPostData = {};\n            this._$tableRows = [];\n            this._columnList = [];\n            this._fieldList = [];\n            this._cache = [];\n            this._extraFieldTypes = [];\n        },\n\n        /* Fills _fieldList, _columnList arrays and sets _keyField variable.\n        *************************************************************************/\n        _createFieldAndColumnList: function () {\n            var self = this;\n\n            $.each(self.options.fields, function (name, props) {\n\n                //Add field to the field list\n                self._fieldList.push(name);\n\n                //Check if this field is the key field\n                if (props.key == true) {\n                    self._keyField = name;\n                }\n\n                //Add field to column list if it is shown in the table\n                if (props.list != false && props.type != 'hidden') {\n                    self._columnList.push(name);\n                }\n            });\n        },\n\n        /* Creates the main container div.\n        *************************************************************************/\n        _createMainContainer: function () {\n            this._$mainContainer = $('<div />')\n                .addClass('jtable-main-container')\n                .appendTo(this.element);\n\n            this._jqueryuiThemeAddClass(this._$mainContainer, 'ui-widget');\n        },\n\n        /* Creates title of the table if a title supplied in options.\n        *************************************************************************/\n        _createTableTitle: function () {\n            var self = this;\n\n            if (!self.options.title) {\n                return;\n            }\n\n            var $titleDiv = $('<div />')\n                .addClass('jtable-title')\n                .appendTo(self._$mainContainer);\n\n            self._jqueryuiThemeAddClass($titleDiv, 'ui-widget-header');\n\n            $('<div />')\n                .addClass('jtable-title-text')\n                .appendTo($titleDiv)\n                .append(self.options.title);\n\n            if (self.options.showCloseButton) {\n\n                var $textSpan = $('<span />')\n                    .html(self.options.messages.close);\n\n                $('<button></button>')\n                    .addClass('jtable-command-button jtable-close-button')\n                    .attr('title', self.options.messages.close)\n                    .append($textSpan)\n                    .appendTo($titleDiv)\n                    .click(function (e) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        self._onCloseRequested();\n                    });\n            }\n\n            self._$titleDiv = $titleDiv;\n        },\n\n        /* Creates the table.\n        *************************************************************************/\n        _createTable: function () {\n            this._$table = $('<table></table>')\n                .addClass('jtable')\n                .appendTo(this._$mainContainer);\n\n            if (this.options.tableId) {\n                this._$table.attr('id', this.options.tableId);\n            }\n\n            this._jqueryuiThemeAddClass(this._$table, 'ui-widget-content');\n\n            this._createTableHead();\n            this._createTableBody();\n        },\n\n        /* Creates header (all column headers) of the table.\n        *************************************************************************/\n        _createTableHead: function () {\n            var $thead = $('<thead></thead>')\n                .appendTo(this._$table);\n\n            this._addRowToTableHead($thead);\n        },\n\n        /* Adds tr element to given thead element\n        *************************************************************************/\n        _addRowToTableHead: function ($thead) {\n            var $tr = $('<tr></tr>')\n                .appendTo($thead);\n\n            this._addColumnsToHeaderRow($tr);\n        },\n\n        /* Adds column header cells to given tr element.\n        *************************************************************************/\n        _addColumnsToHeaderRow: function ($tr) {\n            for (var i = 0; i < this._columnList.length; i++) {\n                var fieldName = this._columnList[i];\n                var $headerCell = this._createHeaderCellForField(fieldName, this.options.fields[fieldName]);\n                $headerCell.appendTo($tr);\n            }\n        },\n\n        /* Creates a header cell for given field.\n        *  Returns th jQuery object.\n        *************************************************************************/\n        _createHeaderCellForField: function (fieldName, field) {\n            field.width = field.width || '10%'; //default column width: 10%.\n\n            var $headerTextSpan = $('<span />')\n                .addClass('jtable-column-header-text')\n                .html(field.title);\n\n            var $headerContainerDiv = $('<div />')\n                .addClass('jtable-column-header-container')\n                .append($headerTextSpan);\n\n            var $th = $('<th></th>')\n                .addClass('jtable-column-header')\n                .addClass(field.listClass)\n                .css('width', field.width)\n                .data('fieldName', fieldName)\n                .append($headerContainerDiv);\n\n            this._jqueryuiThemeAddClass($th, 'ui-state-default');\n\n            return $th;\n        },\n\n        /* Creates an empty header cell that can be used as command column headers.\n        *************************************************************************/\n        _createEmptyCommandHeader: function () {\n            var $th = $('<th></th>')\n                .addClass('jtable-command-column-header')\n                .css('width', '1%');\n\n            this._jqueryuiThemeAddClass($th, 'ui-state-default');\n\n            return $th;\n        },\n\n        /* Creates tbody tag and adds to the table.\n        *************************************************************************/\n        _createTableBody: function () {\n            this._$tableBody = $('<tbody></tbody>').appendTo(this._$table);\n        },\n\n        /* Creates a div to block UI while jTable is busy.\n        *************************************************************************/\n        _createBusyPanel: function () {\n            this._$busyMessageDiv = $('<div />').addClass('jtable-busy-message').prependTo(this._$mainContainer);\n            this._$busyDiv = $('<div />').addClass('jtable-busy-panel-background').prependTo(this._$mainContainer);\n            this._jqueryuiThemeAddClass(this._$busyMessageDiv, 'ui-widget-header');\n            this._hideBusy();\n        },\n\n        /* Creates and prepares error dialog div.\n        *************************************************************************/\n        _createErrorDialogDiv: function () {\n            var self = this;\n\n            self._$errorDialogDiv = $('<div></div>').appendTo(self._$mainContainer);\n            self._$errorDialogDiv.dialog({\n                autoOpen: false,\n                show: self.options.dialogShowEffect,\n                hide: self.options.dialogHideEffect,\n                modal: true,\n                title: self.options.messages.error,\n                buttons: [{\n                    text: self.options.messages.close,\n                    click: function () {\n                        self._$errorDialogDiv.dialog('close');\n                    }\n                }]\n            });\n        },\n\n        /************************************************************************\n        * PUBLIC METHODS                                                        *\n        *************************************************************************/\n\n        /* Loads data using AJAX call, clears table and fills with new data.\n        *************************************************************************/\n        load: function (postData, completeCallback) {\n            this._lastPostData = postData;\n            this._reloadTable(completeCallback);\n        },\n\n        /* Refreshes (re-loads) table data with last postData.\n        *************************************************************************/\n        reload: function (completeCallback) {\n            this._reloadTable(completeCallback);\n        },\n\n        /* Gets a jQuery row object according to given record key\n        *************************************************************************/\n        getRowByKey: function (key) {\n            for (var i = 0; i < this._$tableRows.length; i++) {\n                if (key == this._getKeyValueOfRecord(this._$tableRows[i].data('record'))) {\n                    return this._$tableRows[i];\n                }\n            }\n\n            return null;\n        },\n\n        /* Completely removes the table from it's container.\n        *************************************************************************/\n        destroy: function () {\n            this.element.empty();\n            $.Widget.prototype.destroy.call(this);\n        },\n\n        /************************************************************************\n        * PRIVATE METHODS                                                       *\n        *************************************************************************/\n\n        /* Used to change options dynamically after initialization.\n        *************************************************************************/\n        _setOption: function (key, value) {\n\n        },\n\n        /* LOADING RECORDS  *****************************************************/\n\n        /* Performs an AJAX call to reload data of the table.\n        *************************************************************************/\n        _reloadTable: function (completeCallback) {\n            var self = this;\n\n            var completeReload = function(data) {\n                self._hideBusy();\n\n                //Show the error message if server returns error\n                if (data.Result != 'OK') {\n                    self._showError(data.Message);\n                    return;\n                }\n\n                //Re-generate table rows\n                self._removeAllRows('reloading');\n                self._addRecordsToTable(data.Records);\n\n                self._onRecordsLoaded(data);\n\n                //Call complete callback\n                if (completeCallback) {\n                    completeCallback();\n                }\n            };\n\n            self._showBusy(self.options.messages.loadingMessage, self.options.loadingAnimationDelay); //Disable table since it's busy\n            self._onLoadingRecords();\n\n            //listAction may be a function, check if it is\n            if ($.isFunction(self.options.actions.listAction)) {\n\n                //Execute the function\n                var funcResult = self.options.actions.listAction(self._lastPostData, self._createJtParamsForLoading());\n\n                //Check if result is a jQuery Deferred object\n                if (self._isDeferredObject(funcResult)) {\n                    funcResult.done(function(data) {\n                        completeReload(data);\n                    }).fail(function() {\n                        self._showError(self.options.messages.serverCommunicationError);\n                    }).always(function() {\n                        self._hideBusy();\n                    });\n                } else { //assume it's the data we're loading\n                    completeReload(funcResult);\n                }\n\n            } else { //assume listAction as URL string.\n\n                //Generate URL (with query string parameters) to load records\n                var loadUrl = self._createRecordLoadUrl();\n\n                //Load data from server using AJAX\n                self._ajax({\n                    url: loadUrl,\n                    data: self._lastPostData,\n                    success: function (data) {\n                        completeReload(data);\n                    },\n                    error: function () {\n                        self._hideBusy();\n                        self._showError(self.options.messages.serverCommunicationError);\n                    }\n                });\n\n            }\n        },\n\n        /* Creates URL to load records.\n        *************************************************************************/\n        _createRecordLoadUrl: function () {\n            return this.options.actions.listAction;\n        },\n\n        _createJtParamsForLoading: function() {\n            return {\n                //Empty as default, paging, sorting or other extensions can override this method to add additional params to load request\n            };\n        },\n\n        /* TABLE MANIPULATION METHODS *******************************************/\n\n        /* Creates a row from given record\n        *************************************************************************/\n        _createRowFromRecord: function (record) {\n            var $tr = $('<tr></tr>')\n                .addClass('jtable-data-row')\n                .attr('data-record-key', this._getKeyValueOfRecord(record))\n                .data('record', record);\n\n            this._addCellsToRowUsingRecord($tr);\n            return $tr;\n        },\n\n        /* Adds all cells to given row.\n        *************************************************************************/\n        _addCellsToRowUsingRecord: function ($row) {\n            var record = $row.data('record');\n            for (var i = 0; i < this._columnList.length; i++) {\n                this._createCellForRecordField(record, this._columnList[i])\n                    .appendTo($row);\n            }\n        },\n\n        /* Create a cell for given field.\n        *************************************************************************/\n        _createCellForRecordField: function (record, fieldName) {\n            return $('<td></td>')\n                .addClass(this.options.fields[fieldName].listClass)\n                .append((this._getDisplayTextForRecordField(record, fieldName)));\n        },\n\n        /* Adds a list of records to the table.\n        *************************************************************************/\n        _addRecordsToTable: function (records) {\n            var self = this;\n\n            $.each(records, function (index, record) {\n                self._addRow(self._createRowFromRecord(record));\n            });\n\n            self._refreshRowStyles();\n        },\n\n        /* Adds a single row to the table.\n        * NOTE: THIS METHOD IS DEPRECATED AND WILL BE REMOVED FROM FEATURE RELEASES.\n        * USE _addRow METHOD.\n        *************************************************************************/\n        _addRowToTable: function ($tableRow, index, isNewRow, animationsEnabled) {\n            var options = {\n                index: this._normalizeNumber(index, 0, this._$tableRows.length, this._$tableRows.length)\n            };\n\n            if (isNewRow == true) {\n                options.isNewRow = true;\n            }\n\n            if (animationsEnabled == false) {\n                options.animationsEnabled = false;\n            }\n\n            this._addRow($tableRow, options);\n        },\n\n        /* Adds a single row to the table.\n        *************************************************************************/\n        _addRow: function ($row, options) {\n            //Set defaults\n            options = $.extend({\n                index: this._$tableRows.length,\n                isNewRow: false,\n                animationsEnabled: true\n            }, options);\n\n            //Remove 'no data' row if this is first row\n            if (this._$tableRows.length <= 0) {\n                this._removeNoDataRow();\n            }\n\n            //Add new row to the table according to it's index\n            options.index = this._normalizeNumber(options.index, 0, this._$tableRows.length, this._$tableRows.length);\n            if (options.index == this._$tableRows.length) {\n                //add as last row\n                this._$tableBody.append($row);\n                this._$tableRows.push($row);\n            } else if (options.index == 0) {\n                //add as first row\n                this._$tableBody.prepend($row);\n                this._$tableRows.unshift($row);\n            } else {\n                //insert to specified index\n                this._$tableRows[options.index - 1].after($row);\n                this._$tableRows.splice(options.index, 0, $row);\n            }\n\n            this._onRowInserted($row, options.isNewRow);\n\n            //Show animation if needed\n            if (options.isNewRow) {\n                this._refreshRowStyles();\n                if (this.options.animationsEnabled && options.animationsEnabled) {\n                    this._showNewRowAnimation($row);\n                }\n            }\n        },\n\n        /* Shows created animation for a table row\n        * TODO: Make this animation cofigurable and changable\n        *************************************************************************/\n        _showNewRowAnimation: function ($tableRow) {\n            var className = 'jtable-row-created';\n            if (this.options.jqueryuiTheme) {\n                className = className + ' ui-state-highlight';\n            }\n\n            $tableRow.addClass(className, 'slow', '', function () {\n                $tableRow.removeClass(className, 5000);\n            });\n        },\n\n        /* Removes a row or rows (jQuery selection) from table.\n        *************************************************************************/\n        _removeRowsFromTable: function ($rows, reason) {\n            var self = this;\n\n            //Check if any row specified\n            if ($rows.length <= 0) {\n                return;\n            }\n\n            //remove from DOM\n            $rows.addClass('jtable-row-removed').remove();\n\n            //remove from _$tableRows array\n            $rows.each(function () {\n                var index = self._findRowIndex($(this));\n                if (index >= 0) {\n                    self._$tableRows.splice(index, 1);\n                }\n            });\n\n            self._onRowsRemoved($rows, reason);\n\n            //Add 'no data' row if all rows removed from table\n            if (self._$tableRows.length == 0) {\n                self._addNoDataRow();\n            }\n\n            self._refreshRowStyles();\n        },\n\n        /* Finds index of a row in table.\n        *************************************************************************/\n        _findRowIndex: function ($row) {\n            return this._findIndexInArray($row, this._$tableRows, function ($row1, $row2) {\n                return $row1.data('record') == $row2.data('record');\n            });\n        },\n\n        /* Removes all rows in the table and adds 'no data' row.\n        *************************************************************************/\n        _removeAllRows: function (reason) {\n            //If no rows does exists, do nothing\n            if (this._$tableRows.length <= 0) {\n                return;\n            }\n\n            //Select all rows (to pass it on raising _onRowsRemoved event)\n            var $rows = this._$tableBody.find('tr.jtable-data-row');\n\n            //Remove all rows from DOM and the _$tableRows array\n            this._$tableBody.empty();\n            this._$tableRows = [];\n\n            this._onRowsRemoved($rows, reason);\n\n            //Add 'no data' row since we removed all rows\n            this._addNoDataRow();\n        },\n\n        /* Adds \"no data available\" row to the table.\n        *************************************************************************/\n        _addNoDataRow: function () {\n            if (this._$tableBody.find('>tr.jtable-no-data-row').length > 0) {\n                return;\n            }\n\n            var $tr = $('<tr></tr>')\n                .addClass('jtable-no-data-row')\n                .appendTo(this._$tableBody);\n\n            var totalColumnCount = this._$table.find('thead th').length;\n            $('<td></td>')\n                .attr('colspan', totalColumnCount)\n                .html(this.options.messages.noDataAvailable)\n                .appendTo($tr);\n        },\n\n        /* Removes \"no data available\" row from the table.\n        *************************************************************************/\n        _removeNoDataRow: function () {\n            this._$tableBody.find('.jtable-no-data-row').remove();\n        },\n\n        /* Refreshes styles of all rows in the table\n        *************************************************************************/\n        _refreshRowStyles: function () {\n            for (var i = 0; i < this._$tableRows.length; i++) {\n                if (i % 2 == 0) {\n                    this._$tableRows[i].addClass('jtable-row-even');\n                } else {\n                    this._$tableRows[i].removeClass('jtable-row-even');\n                }\n            }\n        },\n\n        /* RENDERING FIELD VALUES ***********************************************/\n\n        /* Gets text for a field of a record according to it's type.\n        *************************************************************************/\n        _getDisplayTextForRecordField: function (record, fieldName) {\n            var field = this.options.fields[fieldName];\n            var fieldValue = record[fieldName];\n\n            //if this is a custom field, call display function\n            if (field.display) {\n                return field.display({ record: record });\n            }\n\n            var extraFieldType = this._findItemByProperty(this._extraFieldTypes, 'type', field.type);\n            if(extraFieldType && extraFieldType.creator){\n                return extraFieldType.creator(record, field);\n            }\n            else if (field.type == 'date') {\n                return this._getDisplayTextForDateRecordField(field, fieldValue);\n            } else if (field.type == 'checkbox') {\n                return this._getCheckBoxTextForFieldByValue(fieldName, fieldValue);\n            } else if (field.options) { //combobox or radio button list since there are options.\n                var options = this._getOptionsForField(fieldName, {\n                    record: record,\n                    value: fieldValue,\n                    source: 'list',\n                    dependedValues: this._createDependedValuesUsingRecord(record, field.dependsOn)\n                });\n                return this._findOptionByValue(options, fieldValue).DisplayText;\n            } else { //other types\n                return fieldValue;\n            }\n        },\n\n        /* Creates and returns an object that's properties are depended values of a record.\n        *************************************************************************/\n        _createDependedValuesUsingRecord: function (record, dependsOn) {\n            if (!dependsOn) {\n                return {};\n            }\n\n            var dependedValues = {};\n            for (var i = 0; i < dependsOn.length; i++) {\n                dependedValues[dependsOn[i]] = record[dependsOn[i]];\n            }\n\n            return dependedValues;\n        },\n\n        /* Finds an option object by given value.\n        *************************************************************************/\n        _findOptionByValue: function (options, value) {\n            return this._findItemByProperty(options, 'Value', value);\n        },\n\n        /* Finds an option object by given value.\n        *************************************************************************/\n        _findItemByProperty: function (items, key, value) {\n            for (var i = 0; i < items.length; i++) {\n                if (items[i][key] == value) {\n                    return items[i];\n                }\n            }\n\n            return {}; //no item found\n        },\n\n        /* Gets text for a date field.\n        *************************************************************************/\n        _getDisplayTextForDateRecordField: function (field, fieldValue) {\n            if (!fieldValue) {\n                return '';\n            }\n\n            var displayFormat = field.displayFormat || this.options.defaultDateFormat;\n            var date = this._parseDate(fieldValue);\n            try {\n                return this._formatDate(displayFormat, date);\n            } catch (e) {\n                return date;\n            }\n        },\n        \n         /* Format the date/time field.\n        *************************************************************************/\n        _formatDate: function (format, date) {\n\n            var pad = function (n, width, z) {\n                z = z || '0';\n                n = n + '';\n                return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\n            };\n\n            format = format.replace('ss', pad(date.getSeconds(), 2));\n            format = format.replace('s', date.getSeconds());\n            format = format.replace('dd', pad(date.getDate(), 2));\n            format = format.replace('d', date.getDate());\n            format = format.replace('mm', pad(date.getMinutes(), 2));\n            format = format.replace('m', date.getMinutes());\n            //format = format.replace('MMMM', monthNames[date.getMonth()]);\n            //format = format.replace('MMM', monthNames[date.getMonth()].substring(0, 3));\n            format = format.replace('MM', pad(date.getMonth() + 1, 2));\n            format = format.replace(/M(?![ao])/, date.getMonth() + 1);\n            //format = format.replace('DD', Days[date.getDay()]);\n            //format = format.replace(/D(?!e)/, Days[date.getDay()].substring(0, 3));\n            format = format.replace('yyyy', date.getFullYear());\n            format = format.replace('YYYY', date.getFullYear());\n            format = format.replace('yy', (date.getFullYear() + \"\").substring(2));\n            format = format.replace('YY', (date.getFullYear() + \"\").substring(2));\n            format = format.replace('HH', pad(date.getHours(), 2));\n            format = format.replace('H', date.getHours());\n            format = format.replace('hh', pad(date.getHours(), 2));\n            format = format.replace('h', date.getHours());\n            return format;\n        },\n\n        /* Gets options for a field according to user preferences.\n        *************************************************************************/\n        _getOptionsForField: function (fieldName, funcParams) {\n            var field = this.options.fields[fieldName];\n            var optionsSource = field.options;\n\n            if ($.isFunction(optionsSource)) {\n                //prepare parameter to the function\n                funcParams = $.extend(true, {\n                    _cacheCleared: false,\n                    dependedValues: {},\n                    clearCache: function () {\n                        this._cacheCleared = true;\n                    }\n                }, funcParams);\n\n                //call function and get actual options source\n                optionsSource = optionsSource(funcParams);\n            }\n\n            var options;\n\n            //Build options according to it's source type\n            if (typeof optionsSource == 'string') { //It is an Url to download options\n                var cacheKey = 'options_' + fieldName + '_' + optionsSource; //create a unique cache key\n                if (funcParams._cacheCleared || (!this._cache[cacheKey])) {\n                    //if user calls clearCache() or options are not found in the cache, download options\n                    this._cache[cacheKey] = this._buildOptionsFromArray(this._downloadOptions(fieldName, optionsSource));\n                    this._sortFieldOptions(this._cache[cacheKey], field.optionsSorting);\n                } else {\n                    //found on cache..\n                    //if this method (_getOptionsForField) is called to get option for a specific value (on funcParams.source == 'list')\n                    //and this value is not in cached options, we need to re-download options to get the unfound (probably new) option.\n                    if (funcParams.value != undefined) {\n                        var optionForValue = this._findOptionByValue(this._cache[cacheKey], funcParams.value);\n                        if (optionForValue.DisplayText == undefined) { //this value is not in cached options...\n                            this._cache[cacheKey] = this._buildOptionsFromArray(this._downloadOptions(fieldName, optionsSource));\n                            this._sortFieldOptions(this._cache[cacheKey], field.optionsSorting);\n                        }\n                    }\n                }\n\n                options = this._cache[cacheKey];\n            } else if (jQuery.isArray(optionsSource)) { //It is an array of options\n                options = this._buildOptionsFromArray(optionsSource);\n                this._sortFieldOptions(options, field.optionsSorting);\n            } else { //It is an object that it's properties are options\n                options = this._buildOptionsArrayFromObject(optionsSource);\n                this._sortFieldOptions(options, field.optionsSorting);\n            }\n\n            return options;\n        },\n\n        /* Download options for a field from server.\n        *************************************************************************/\n        _downloadOptions: function (fieldName, url) {\n            var self = this;\n            var options = [];\n\n            self._ajax({\n                url: url,\n                async: false,\n                success: function (data) {\n                    if (data.Result != 'OK') {\n                        self._showError(data.Message);\n                        return;\n                    }\n\n                    options = data.Options;\n                },\n                error: function () {\n                    var errMessage = self._formatString(self.options.messages.cannotLoadOptionsFor, fieldName);\n                    self._showError(errMessage);\n                }\n            });\n\n            return options;\n        },\n\n        /* Sorts given options according to sorting parameter.\n        *  sorting can be: 'value', 'value-desc', 'text' or 'text-desc'.\n        *************************************************************************/\n        _sortFieldOptions: function (options, sorting) {\n\n            if ((!options) || (!options.length) || (!sorting)) {\n                return;\n            }\n\n            //Determine using value of text\n            var dataSelector;\n            if (sorting.indexOf('value') == 0) {\n                dataSelector = function (option) {\n                    return option.Value;\n                };\n            } else { //assume as text\n                dataSelector = function (option) {\n                    return option.DisplayText;\n                };\n            }\n\n            var compareFunc;\n            if ($.type(dataSelector(options[0])) == 'string') {\n                compareFunc = function (option1, option2) {\n                    return dataSelector(option1).localeCompare(dataSelector(option2));\n                };\n            } else { //asuume as numeric\n                compareFunc = function (option1, option2) {\n                    return dataSelector(option1) - dataSelector(option2);\n                };\n            }\n\n            if (sorting.indexOf('desc') > 0) {\n                options.sort(function (a, b) {\n                    return compareFunc(b, a);\n                });\n            } else { //assume as asc\n                options.sort(function (a, b) {\n                    return compareFunc(a, b);\n                });\n            }\n        },\n\n        /* Creates an array of options from given object.\n        *************************************************************************/\n        _buildOptionsArrayFromObject: function (options) {\n            var list = [];\n\n            $.each(options, function (propName, propValue) {\n                list.push({\n                    Value: propName,\n                    DisplayText: propValue\n                });\n            });\n\n            return list;\n        },\n\n        /* Creates array of options from giving options array.\n        *************************************************************************/\n        _buildOptionsFromArray: function (optionsArray) {\n            var list = [];\n\n            for (var i = 0; i < optionsArray.length; i++) {\n                if ($.isPlainObject(optionsArray[i])) {\n                    list.push(optionsArray[i]);\n                } else { //assumed as primitive type (int, string...)\n                    list.push({\n                        Value: optionsArray[i],\n                        DisplayText: optionsArray[i]\n                    });\n                }\n            }\n\n            return list;\n        },\n\n        /* Parses given date string to a javascript Date object.\n        *  Given string must be formatted one of the samples shown below:\n        *  /Date(1320259705710)/\n        *  2011-01-01 20:32:42 (YYYY-MM-DD HH:MM:SS)\n        *  2011-01-01 (YYYY-MM-DD)\n        *  2011-10-15T14:42:51 (ISO 8601)\n        *************************************************************************/\n        _parseDate: function (dateString) {\n            try {\n                if (dateString.indexOf('Date') >= 0) { //Format: /Date(1320259705710)/\n                    return new Date(\n                        parseInt(dateString.substr(6), 10)\n                    );\n                } else if (dateString.length == 10) { //Format: 2011-01-01\n                    return new Date(\n                        parseInt(dateString.substr(0, 4), 10),\n                        parseInt(dateString.substr(5, 2), 10) - 1,\n                        parseInt(dateString.substr(8, 2), 10)\n                    );\n                } else if (dateString.length == 19) { //Format: 2011-01-01 20:32:42\n                    return new Date(\n                        parseInt(dateString.substr(0, 4), 10),\n                        parseInt(dateString.substr(5, 2), 10) - 1,\n                        parseInt(dateString.substr(8, 2), 10),\n                        parseInt(dateString.substr(11, 2), 10),\n                        parseInt(dateString.substr(14, 2), 10),\n                        parseInt(dateString.substr(17, 2), 10)\n                    );\n                } else if (dateString.indexOf('T') > 0) { //Format: ISO 8601 2009-10-15T14:42:51\n                    var dtstr = dateString.replace(/\\D/g, \" \");\n                    var dtcomps = dtstr.split(\" \");\n                    dtcomps[1]--;   // modify month between 1 based ISO 8601 and zero based Date\n                    return new Date(\n                        Date.UTC(\n                            dtcomps[0],\n                            dtcomps[1],\n                            dtcomps[2],\n                            dtcomps[3],\n                            dtcomps[4],\n                            dtcomps[5]));\n                } else {\n                    throw 'Given date is not properly formatted: ' + dateString;\n                }\n            } catch (e) {\n                this._logWarn(e);\n                return 'format error!';\n            }\n        },\n\n        /* TOOL BAR *************************************************************/\n\n        /* Creates the toolbar.\n        *************************************************************************/\n        _createToolBar: function () {\n            this._$toolbarDiv = $('<div />')\n            .addClass('jtable-toolbar')\n            .appendTo(this._$titleDiv);\n\n            for (var i = 0; i < this.options.toolbar.items.length; i++) {\n                this._addToolBarItem(this.options.toolbar.items[i]);\n            }\n        },\n\n        /* Adds a new item to the toolbar.\n        *************************************************************************/\n        _addToolBarItem: function (item) {\n\n            //Check if item is valid\n            if ((item == undefined) || (item.text == undefined && item.icon == undefined)) {\n                this._logWarn('Can not add tool bar item since it is not valid!');\n                this._logWarn(item);\n                return null;\n            }\n\n            var $toolBarItem = $('<span></span>')\n                .addClass('jtable-toolbar-item')\n                .appendTo(this._$toolbarDiv);\n\n            this._jqueryuiThemeAddClass($toolBarItem, 'ui-widget ui-state-default ui-corner-all', 'ui-state-hover');\n\n            //cssClass property\n            if (item.cssClass) {\n                $toolBarItem\n                    .addClass(item.cssClass);\n            }\n\n            //tooltip property\n            if (item.tooltip) {\n                $toolBarItem\n                    .attr('title', item.tooltip);\n            }\n\n            //icon property\n            if (item.icon) {\n                var $icon = $('<span class=\"jtable-toolbar-item-icon\"></span>').appendTo($toolBarItem);\n                if (item.icon === true) {\n                    //do nothing\n                } else if ($.type(item.icon === 'string')) {\n                    $icon.css('background', 'url(\"' + item.icon + '\")');\n                }\n            }\n\n            //text property\n            if (item.text) {\n                $('<span class=\"\"></span>')\n                    .html(item.text)\n                    .addClass('jtable-toolbar-item-text').appendTo($toolBarItem);\n            }\n\n            //click event\n            if (item.click) {\n                $toolBarItem.click(function () {\n                    item.click();\n                });\n            }\n\n            //set hover animation parameters\n            var hoverAnimationDuration = undefined;\n            var hoverAnimationEasing = undefined;\n            if (this.options.toolbar.hoverAnimation) {\n                hoverAnimationDuration = this.options.toolbar.hoverAnimationDuration;\n                hoverAnimationEasing = this.options.toolbar.hoverAnimationEasing;\n            }\n\n            //change class on hover\n            $toolBarItem.hover(function () {\n                $toolBarItem.addClass('jtable-toolbar-item-hover', hoverAnimationDuration, hoverAnimationEasing);\n            }, function () {\n                $toolBarItem.removeClass('jtable-toolbar-item-hover', hoverAnimationDuration, hoverAnimationEasing);\n            });\n\n            return $toolBarItem;\n        },\n\n        /* ERROR DIALOG *********************************************************/\n\n        /* Shows error message dialog with given message.\n        *************************************************************************/\n        _showError: function (message) {\n            this._$errorDialogDiv.html(message).dialog('open');\n        },\n\n        /* BUSY PANEL ***********************************************************/\n\n        /* Shows busy indicator and blocks table UI.\n        * TODO: Make this cofigurable and changable\n        *************************************************************************/\n        _setBusyTimer: null,\n        _showBusy: function (message, delay) {\n            var self = this;  //\n\n            //Show a transparent overlay to prevent clicking to the table\n            self._$busyDiv\n                .width(self._$mainContainer.width())\n                .height(self._$mainContainer.height())\n                .addClass('jtable-busy-panel-background-invisible')\n                .show();\n\n            var makeVisible = function () {\n                self._$busyDiv.removeClass('jtable-busy-panel-background-invisible');\n                self._$busyMessageDiv.html(message).show();\n            };\n\n            if (delay) {\n                if (self._setBusyTimer) {\n                    return;\n                }\n\n                self._setBusyTimer = setTimeout(makeVisible, delay);\n            } else {\n                makeVisible();\n            }\n        },\n\n        /* Hides busy indicator and unblocks table UI.\n        *************************************************************************/\n        _hideBusy: function () {\n            clearTimeout(this._setBusyTimer);\n            this._setBusyTimer = null;\n            this._$busyDiv.hide();\n            this._$busyMessageDiv.html('').hide();\n        },\n\n        /* Returns true if jTable is busy.\n        *************************************************************************/\n        _isBusy: function () {\n            return this._$busyMessageDiv.is(':visible');\n        },\n\n        /* Adds jQueryUI class to an item.\n        *************************************************************************/\n        _jqueryuiThemeAddClass: function ($elm, className, hoverClassName) {\n            if (!this.options.jqueryuiTheme) {\n                return;\n            }\n\n            $elm.addClass(className);\n\n            if (hoverClassName) {\n                $elm.hover(function () {\n                    $elm.addClass(hoverClassName);\n                }, function () {\n                    $elm.removeClass(hoverClassName);\n                });\n            }\n        },\n\n        /* COMMON METHODS *******************************************************/\n\n        /* Performs an AJAX call to specified URL.\n        * THIS METHOD IS DEPRECATED AND WILL BE REMOVED FROM FEATURE RELEASES.\n        * USE _ajax METHOD.\n        *************************************************************************/\n        _performAjaxCall: function (url, postData, async, success, error) {\n            this._ajax({\n                url: url,\n                data: postData,\n                async: async,\n                success: success,\n                error: error\n            });\n        },\n\n        _unAuthorizedRequestHandler: function() {\n            if (this.options.unAuthorizedRequestRedirectUrl) {\n                location.href = this.options.unAuthorizedRequestRedirectUrl;\n            } else {\n                location.reload(true);\n            }\n        },\n\n        /* This method is used to perform AJAX calls in jTable instead of direct\n        * usage of jQuery.ajax method.\n        *************************************************************************/\n        _ajax: function (options) {\n            var self = this;\n\n            //Handlers for HTTP status codes\n            var opts = {\n                statusCode: {\n                    401: function () { //Unauthorized\n                        self._unAuthorizedRequestHandler();\n                    }\n                }\n            };\n\n            opts = $.extend(opts, this.options.ajaxSettings, options);\n\n            //Override success\n            opts.success = function (data) {\n                //Checking for Authorization error\n                if (data && data.UnAuthorizedRequest == true) {\n                    self._unAuthorizedRequestHandler();\n                }\n\n                if (options.success) {\n                    options.success(data);\n                }\n            };\n\n            //Override error\n            opts.error = function (jqXHR, textStatus, errorThrown) {\n                if (unloadingPage) {\n                    jqXHR.abort();\n                    return;\n                }\n\n                if (options.error) {\n                    options.error(arguments);\n                }\n            };\n\n            //Override complete\n            opts.complete = function () {\n                if (options.complete) {\n                    options.complete();\n                }\n            };\n\n            $.ajax(opts);\n        },\n\n        /* Gets value of key field of a record.\n        *************************************************************************/\n        _getKeyValueOfRecord: function (record) {\n            return record[this._keyField];\n        },\n\n        /************************************************************************\n        * COOKIE                                                                *\n        *************************************************************************/\n\n        /* Sets a cookie with given key.\n        *************************************************************************/\n        _setCookie: function (key, value) {\n            key = this._cookieKeyPrefix + key;\n\n            var expireDate = new Date();\n            expireDate.setDate(expireDate.getDate() + 30);\n            document.cookie = encodeURIComponent(key) + '=' + encodeURIComponent(value) + \"; expires=\" + expireDate.toUTCString();\n        },\n\n        /* Gets a cookie with given key.\n        *************************************************************************/\n        _getCookie: function (key) {\n            key = this._cookieKeyPrefix + key;\n\n            var equalities = document.cookie.split('; ');\n            for (var i = 0; i < equalities.length; i++) {\n                if (!equalities[i]) {\n                    continue;\n                }\n\n                var splitted = equalities[i].split('=');\n                if (splitted.length != 2) {\n                    continue;\n                }\n\n                if (decodeURIComponent(splitted[0]) === key) {\n                    return decodeURIComponent(splitted[1] || '');\n                }\n            }\n\n            return null;\n        },\n\n        /* Generates a hash key to be prefix for all cookies for this jtable instance.\n        *************************************************************************/\n        _generateCookieKeyPrefix: function () {\n\n            var simpleHash = function (value) {\n                var hash = 0;\n                if (value.length == 0) {\n                    return hash;\n                }\n\n                for (var i = 0; i < value.length; i++) {\n                    var ch = value.charCodeAt(i);\n                    hash = ((hash << 5) - hash) + ch;\n                    hash = hash & hash;\n                }\n\n                return hash;\n            };\n\n            var strToHash = '';\n            if (this.options.tableId) {\n                strToHash = strToHash + this.options.tableId + '#';\n            }\n\n            strToHash = strToHash + this._columnList.join('$') + '#c' + this._$table.find('thead th').length;\n            return 'jtable#' + simpleHash(strToHash);\n        },\n\n        /************************************************************************\n        * EVENT RAISING METHODS                                                 *\n        *************************************************************************/\n\n        _onLoadingRecords: function () {\n            this._trigger(\"loadingRecords\", null, {});\n        },\n\n        _onRecordsLoaded: function (data) {\n            this._trigger(\"recordsLoaded\", null, { records: data.Records, serverResponse: data });\n        },\n\n        _onRowInserted: function ($row, isNewRow) {\n            this._trigger(\"rowInserted\", null, { row: $row, record: $row.data('record'), isNewRow: isNewRow });\n        },\n\n        _onRowsRemoved: function ($rows, reason) {\n            this._trigger(\"rowsRemoved\", null, { rows: $rows, reason: reason });\n        },\n\n        _onCloseRequested: function () {\n            this._trigger(\"closeRequested\", null, {});\n        }\n\n    });\n\n}(jQuery));\n\n/************************************************************************\n* Some UTULITY methods used by jTable                                   *\n*************************************************************************/\n(function ($) {\n\n    $.extend(true, $.hik.jtable.prototype, {\n\n        /* Gets property value of an object recursively.\n        *************************************************************************/\n        _getPropertyOfObject: function (obj, propName) {\n            if (propName.indexOf('.') < 0) {\n                return obj[propName];\n            } else {\n                var preDot = propName.substring(0, propName.indexOf('.'));\n                var postDot = propName.substring(propName.indexOf('.') + 1);\n                return this._getPropertyOfObject(obj[preDot], postDot);\n            }\n        },\n\n        /* Sets property value of an object recursively.\n        *************************************************************************/\n        _setPropertyOfObject: function (obj, propName, value) {\n            if (propName.indexOf('.') < 0) {\n                obj[propName] = value;\n            } else {\n                var preDot = propName.substring(0, propName.indexOf('.'));\n                var postDot = propName.substring(propName.indexOf('.') + 1);\n                this._setPropertyOfObject(obj[preDot], postDot, value);\n            }\n        },\n\n        /* Inserts a value to an array if it does not exists in the array.\n        *************************************************************************/\n        _insertToArrayIfDoesNotExists: function (array, value) {\n            if ($.inArray(value, array) < 0) {\n                array.push(value);\n            }\n        },\n\n        /* Finds index of an element in an array according to given comparision function\n        *************************************************************************/\n        _findIndexInArray: function (value, array, compareFunc) {\n\n            //If not defined, use default comparision\n            if (!compareFunc) {\n                compareFunc = function (a, b) {\n                    return a == b;\n                };\n            }\n\n            for (var i = 0; i < array.length; i++) {\n                if (compareFunc(value, array[i])) {\n                    return i;\n                }\n            }\n\n            return -1;\n        },\n\n        /* Normalizes a number between given bounds or sets to a defaultValue\n        *  if it is undefined\n        *************************************************************************/\n        _normalizeNumber: function (number, min, max, defaultValue) {\n            if (number == undefined || number == null || isNaN(number)) {\n                return defaultValue;\n            }\n\n            if (number < min) {\n                return min;\n            }\n\n            if (number > max) {\n                return max;\n            }\n\n            return number;\n        },\n\n        /* Formats a string just like string.format in c#.\n        *  Example:\n        *  _formatString('Hello {0}','Halil') = 'Hello Halil'\n        *************************************************************************/\n        _formatString: function () {\n            if (arguments.length == 0) {\n                return null;\n            }\n\n            var str = arguments[0];\n            for (var i = 1; i < arguments.length; i++) {\n                var placeHolder = '{' + (i - 1) + '}';\n                str = str.replace(placeHolder, arguments[i]);\n            }\n\n            return str;\n        },\n\n        /* Checks if given object is a jQuery Deferred object.\n         */\n        _isDeferredObject: function (obj) {\n            return obj.then && obj.done && obj.fail;\n        },\n\n        //Logging methods ////////////////////////////////////////////////////////\n\n        _logDebug: function (text) {\n            if (!window.console) {\n                return;\n            }\n\n            console.log('jTable DEBUG: ' + text);\n        },\n\n        _logInfo: function (text) {\n            if (!window.console) {\n                return;\n            }\n\n            console.log('jTable INFO: ' + text);\n        },\n\n        _logWarn: function (text) {\n            if (!window.console) {\n                return;\n            }\n\n            console.log('jTable WARNING: ' + text);\n        },\n\n        _logError: function (text) {\n            if (!window.console) {\n                return;\n            }\n\n            console.log('jTable ERROR: ' + text);\n        }\n\n    });\n\n    /* Fix for array.indexOf method in IE7.\n     * This code is taken from http://www.tutorialspoint.com/javascript/array_indexof.htm */\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (elt) {\n            var len = this.length;\n            var from = Number(arguments[1]) || 0;\n            from = (from < 0)\n                 ? Math.ceil(from)\n                 : Math.floor(from);\n            if (from < 0)\n                from += len;\n            for (; from < len; from++) {\n                if (from in this &&\n                    this[from] === elt)\n                    return from;\n            }\n            return -1;\n        };\n    }\n\n})(jQuery);\n\n/************************************************************************\r\n* SORTING extension for jTable                                          *\r\n*************************************************************************/\r\n(function ($) {\r\n\r\n    //Reference to base object members\r\n    var base = {\r\n        _initializeFields: $.hik.jtable.prototype._initializeFields,\r\n        _normalizeFieldOptions: $.hik.jtable.prototype._normalizeFieldOptions,\r\n        _createHeaderCellForField: $.hik.jtable.prototype._createHeaderCellForField,\r\n        _createRecordLoadUrl: $.hik.jtable.prototype._createRecordLoadUrl,\r\n        _createJtParamsForLoading: $.hik.jtable.prototype._createJtParamsForLoading\r\n    };\r\n\r\n    //extension members\r\n    $.extend(true, $.hik.jtable.prototype, {\r\n\r\n        /************************************************************************\r\n        * DEFAULT OPTIONS / EVENTS                                              *\r\n        *************************************************************************/\r\n        options: {\r\n            sorting: false,\r\n            multiSorting: false,\r\n            defaultSorting: ''\r\n        },\r\n\r\n        /************************************************************************\r\n        * PRIVATE FIELDS                                                        *\r\n        *************************************************************************/\r\n\r\n        _lastSorting: null, //Last sorting of the table\r\n\r\n        /************************************************************************\r\n        * OVERRIDED METHODS                                                     *\r\n        *************************************************************************/\r\n\r\n        /* Overrides base method to create sorting array.\r\n        *************************************************************************/\r\n        _initializeFields: function () {\r\n            base._initializeFields.apply(this, arguments);\r\n\r\n            this._lastSorting = [];\r\n            if (this.options.sorting) {\r\n                this._buildDefaultSortingArray();\r\n            }\r\n        },\r\n\r\n        /* Overrides _normalizeFieldOptions method to normalize sorting option for fields.\r\n        *************************************************************************/\r\n        _normalizeFieldOptions: function (fieldName, props) {\r\n            base._normalizeFieldOptions.apply(this, arguments);\r\n            props.sorting = (props.sorting != false);\r\n        },\r\n\r\n        /* Overrides _createHeaderCellForField to make columns sortable.\r\n        *************************************************************************/\r\n        _createHeaderCellForField: function (fieldName, field) {\r\n            var $headerCell = base._createHeaderCellForField.apply(this, arguments);\r\n            if (this.options.sorting && field.sorting) {\r\n                this._makeColumnSortable($headerCell, fieldName, field.initialSortingDirection);\r\n            }\r\n\r\n            return $headerCell;\r\n        },\r\n\r\n        /* Overrides _createRecordLoadUrl to add sorting specific info to URL.\r\n        *************************************************************************/\r\n        _createRecordLoadUrl: function () {\r\n            var loadUrl = base._createRecordLoadUrl.apply(this, arguments);\r\n            loadUrl = this._addSortingInfoToUrl(loadUrl);\r\n            return loadUrl;\r\n        },\r\n\r\n        /************************************************************************\r\n        * PRIVATE METHODS                                                       *\r\n        *************************************************************************/\r\n\r\n        /* Builds the sorting array according to defaultSorting string\r\n        *************************************************************************/\r\n        _buildDefaultSortingArray: function () {\r\n            var self = this;\r\n\r\n            $.each(self.options.defaultSorting.split(\",\"), function (orderIndex, orderValue) {\r\n                $.each(self.options.fields, function (fieldName, fieldProps) {\r\n                    if (fieldProps.sorting) {\r\n                        var colOffset = orderValue.indexOf(fieldName);\r\n                        if (colOffset > -1) {\r\n                            if (orderValue.toUpperCase().indexOf(' DESC', colOffset) > -1) {\r\n                                self._lastSorting.push({\r\n                                    fieldName: fieldName,\r\n                                    sortOrder: 'DESC'\r\n                                });\r\n                            } else {\r\n                                self._lastSorting.push({\r\n                                    fieldName: fieldName,\r\n                                    sortOrder: 'ASC'\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        /* Makes a column sortable.\r\n        *************************************************************************/\r\n        _makeColumnSortable: function ($columnHeader, fieldName, initialSortingDirection) {\r\n            var self = this;\r\n            \r\n            $columnHeader\r\n                .addClass('jtable-column-header-sortable')\r\n                .click(function (e) {\r\n                    e.preventDefault();\r\n\r\n                    if (!self.options.multiSorting || !e.ctrlKey) {\r\n                        self._lastSorting = []; //clear previous sorting\r\n                    }\r\n                    \r\n                    self._sortTableByColumn($columnHeader);\r\n                });\r\n\r\n            if(initialSortingDirection){\r\n                $columnHeader.addClass('jtable-column-header-sorted-' + initialSortingDirection.toLowerCase());\r\n            }        \r\n\r\n            //Set default sorting\r\n            $.each(this._lastSorting, function (sortIndex, sortField) {\r\n                if (sortField.fieldName == fieldName) {\r\n                    if (sortField.sortOrder == 'DESC') {\r\n                        $columnHeader.addClass('jtable-column-header-sorted-desc');\r\n                    } else {\r\n                        $columnHeader.addClass('jtable-column-header-sorted-asc');\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /* Sorts table according to a column header.\r\n        *************************************************************************/\r\n        _sortTableByColumn: function ($columnHeader) {\r\n            //Remove sorting styles from all columns except this one\r\n            if (this._lastSorting.length == 0) {\r\n                $columnHeader.siblings().removeClass('jtable-column-header-sorted-asc jtable-column-header-sorted-desc');\r\n            }\r\n\r\n            //If current sorting list includes this column, remove it from the list\r\n            for (var i = 0; i < this._lastSorting.length; i++) {\r\n                if (this._lastSorting[i].fieldName == $columnHeader.data('fieldName')) {\r\n                    this._lastSorting.splice(i--, 1);\r\n                }\r\n            }\r\n\r\n            //Sort ASC or DESC according to current sorting state\r\n            if ($columnHeader.hasClass('jtable-column-header-sorted-asc')) {\r\n                $columnHeader.removeClass('jtable-column-header-sorted-asc').addClass('jtable-column-header-sorted-desc');\r\n                this._lastSorting.push({\r\n                    'fieldName': $columnHeader.data('fieldName'),\r\n                    sortOrder: 'DESC'\r\n                });\r\n            } else {\r\n                $columnHeader.removeClass('jtable-column-header-sorted-desc').addClass('jtable-column-header-sorted-asc');\r\n                this._lastSorting.push({\r\n                    'fieldName': $columnHeader.data('fieldName'),\r\n                    sortOrder: 'ASC'\r\n                });\r\n            }\r\n\r\n            //Load current page again\r\n            this._reloadTable();\r\n        },\r\n\r\n        /* Adds jtSorting parameter to a URL as query string.\r\n        *************************************************************************/\r\n        _addSortingInfoToUrl: function (url) {\r\n            if (!this.options.sorting || this._lastSorting.length == 0) {\r\n                return url;\r\n            }\r\n\r\n            var sorting = [];\r\n            $.each(this._lastSorting, function (idx, value) {\r\n                sorting.push(value.fieldName + ' ' + value.sortOrder);\r\n            });\r\n\r\n            return (url + (url.indexOf('?') < 0 ? '?' : '&') + 'jtSorting=' + sorting.join(\",\"));\r\n        },\r\n\r\n        /* Overrides _createJtParamsForLoading method to add sorging parameters to jtParams object.\r\n        *************************************************************************/\r\n        _createJtParamsForLoading: function () {\r\n            var jtParams = base._createJtParamsForLoading.apply(this, arguments);\r\n\r\n            if (this.options.sorting && this._lastSorting.length) {\r\n                var sorting = [];\r\n                $.each(this._lastSorting, function (idx, value) {\r\n                    sorting.push(value.fieldName + ' ' + value.sortOrder);\r\n                });\r\n\r\n                jtParams.jtSorting = sorting.join(\",\");\r\n            }\r\n\r\n            return jtParams;\r\n        }\r\n\r\n    });\r\n\r\n})(jQuery);"]}